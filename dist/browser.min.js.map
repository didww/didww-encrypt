{"version":3,"sources":["constants.js","index.js","browser.js"],"names":["SEPARATOR","FINGERPRINT_ALGO","name","SYM_ALGO","length","ASYM_ALGO","modulusLength","publicExponent","Uint8Array","hash","URLS","production","sandbox","module","exports","require","DidwwEncryptedFile","content","toString","toFile","buildFile","toArrayBuffer","stringToArrayBuffer","logError","message","console","error","fetchPublicKeys","url","fetch","then","response","json","payload","data","map","res","attributes","key","cryptoFingerprint","text","digestAlgo","textBuff","sha1Func","crypto","subtle","digest","bind","digestBuff","arrayBufferToHexString","calculateFingerprint","pemPublicKeys","publicKeysBase64","pemPubKey","PemToBase64Key","fingerprints","atob","result","push","_","join","str","buf","ArrayBuffer","bufView","i","charCodeAt","hexStringToArrayBuffer","hexString","intArray","match","byte","parseInt","buffer","arrayBufferToString","bytes","reduce","String","fromCharCode","byteString","type","window","navigator","msSaveBlob","file","Blob","lastModifiedDate","Date","File","lastModified","readFileContent","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsDataURL","generateKey","cryptoKey","exportKey","keyBuffer","encryptAES","ivBufView","getRandomValues","salt","repeat","importKey","encrypt","iv","encryptedBuffer","encryptedContent","btoa","split","slice","encryptRSA","pubKeyBase64","catch","DidwwEncrypt","options","environment","publicKeysUrl","publicKeys","testPublicKeys","fingerprint","getPublicKeys","getFingerprint","keys","clearCache","encryptContent","fileContent","asymKeys","symKey","symEncryptedContent","symEncryptedKey","encryptedParts","concat","encryptFile","encryptArrayBuffer","binary"],"mappings":"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","file":"browser.min.js","sourceRoot":"../src","sourcesContent":["const SEPARATOR = \":::\"\nconst FINGERPRINT_ALGO = { name: \"sha-1\" }\nconst SYM_ALGO = { name: \"AES-CBC\", length: 256 }\nconst ASYM_ALGO = {\n    name: \"RSA-OAEP\",\n    modulusLength: 4096,\n    publicExponent: new Uint8Array([1, 0, 1]),\n    hash: { name: \"SHA-256\" }\n}\nconst URLS = {\n    production: 'https://api.didww.com/v3/public_keys',\n    sandbox: 'https://api-sandbox.didww.com/v3/public_keys'\n}\n\nmodule.exports = {\n    SEPARATOR,\n    FINGERPRINT_ALGO,\n    SYM_ALGO,\n    ASYM_ALGO,\n    URLS\n}\n","const {\n    SEPARATOR,\n    FINGERPRINT_ALGO,\n    SYM_ALGO,\n    ASYM_ALGO,\n    URLS\n} = require('./constants')\n\nfunction DidwwEncryptedFile (content) {\n    this.toString = () => content\n    this.toFile = (name) => buildFile(content, name || 'file.enc', 'text/plain')\n    this.toArrayBuffer = () => stringToArrayBuffer(content)\n}\n\nfunction logError(message) {\n    if (console && console.error) console.error(message)\n}\n\nfunction fetchPublicKeys(url) {\n    return fetch(url)\n        .then(response => response.json())\n        .then(\n            payload => payload.data.map(res => res.attributes.key)\n        )\n}\n\nfunction cryptoFingerprint (text, digestAlgo) {\n    var textBuff = stringToArrayBuffer(text);\n    var sha1Func = crypto.subtle.digest.bind(crypto.subtle, digestAlgo);\n    return sha1Func(textBuff)\n        .then(digestBuff => arrayBufferToHexString(digestBuff))\n}\n\nfunction calculateFingerprint(pemPublicKeys) {\n    let publicKeysBase64 = pemPublicKeys.map(pemPubKey => PemToBase64Key(pemPubKey))\n    let fingerprints = []\n    return cryptoFingerprint(atob(publicKeysBase64[0]), FINGERPRINT_ALGO)\n        .then(result => fingerprints.push(result))\n        .then(_ => cryptoFingerprint(atob(publicKeysBase64[1]), FINGERPRINT_ALGO))\n        .then(result => fingerprints.push(result))\n        .then(_ => fingerprints.join(SEPARATOR))\n}\n\nfunction stringToArrayBuffer(str) {\n    let buf = new ArrayBuffer(str.length)\n    let bufView = new Uint8Array(buf)\n    for (let i = 0; i < str.length; i++) {\n        bufView[i] = str.charCodeAt(i)\n    }\n    return buf\n}\n\nfunction hexStringToArrayBuffer (hexString) {\n    let intArray = hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16))\n    return new Uint8Array(intArray).buffer\n}\n\nfunction arrayBufferToString (buf) {\n    let bytes = new Uint8Array(buf)\n    return bytes.reduce((str, byte) => str + String.fromCharCode(byte), \"\")\n}\n\nfunction arrayBufferToHexString (buf) {\n    let bytes = new Uint8Array(buf)\n    return bytes.reduce((hexString, byte) => {\n        let byteString = byte.toString(16)\n        if (byteString.length === 1) {\n            byteString = '0' + byteString\n        }\n        return hexString + byteString\n    }, \"\");\n}\n\nconst buildFile = (content, name, type) => {\n    // Edge browser does not support File\n    if (window && window.navigator && window.navigator.msSaveBlob) {\n        let file = new Blob([content], {type: type});\n        file.lastModifiedDate = new Date();\n        file.name = name;\n        return file;\n    }\n\n    return new File([content], name, {type: type, lastModified: new Date()})\n}\n\nfunction readFileContent (file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader()\n        reader.onload = () => resolve(reader.result)\n        reader.onerror = () => reject(reader.error)\n        reader.readAsDataURL(file)\n    })\n}\n\nfunction generateKey () {\n    return crypto.subtle.generateKey(\n        SYM_ALGO,\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(cryptoKey => {\n        return crypto.subtle.exportKey(\"raw\", cryptoKey)\n            .then(keyBuffer => arrayBufferToHexString(keyBuffer))\n    })\n}\n\nfunction encryptAES (key, content) {\n    let keyBuffer = hexStringToArrayBuffer(key)\n    let ivBufView = crypto.getRandomValues(new Uint8Array(16))\n    let salt = '0'.repeat(16)\n\n    return crypto.subtle.importKey(\n        \"raw\",\n        keyBuffer,\n        { name: SYM_ALGO.name },\n        false,\n        [\"encrypt\", \"decrypt\"]\n    ).then(cryptoKey => {\n        return crypto.subtle.encrypt(\n            { name: SYM_ALGO.name, iv: ivBufView },\n            cryptoKey,\n            stringToArrayBuffer(content)\n        ).then(encryptedBuffer => {\n            // add first 16 bytes salt for backward compatibility old encrypted data.\n            let encryptedContent = btoa(salt + arrayBufferToString(encryptedBuffer))\n            let aesKey = [key, arrayBufferToHexString(ivBufView.buffer)].join(SEPARATOR)\n            return { key: aesKey, content: encryptedContent }\n        })\n    })\n}\n\nfunction PemToBase64Key (pemPubKey) {\n    // pemPubKey should look like this\n    // \"-----BEGIN PUBLIC KEY-----\\n<pubKeyBase64>\\n-----END PUBLIC KEY-----\\n\"\n    if (pemPubKey[pemPubKey.length - 1] !== \"\\n\") pemPubKey = pemPubKey + \"\\n\"\n    return pemPubKey.split(\"\\n\").slice(1, -2).join(\"\")\n}\n\nfunction encryptRSA(pemPubKey, content) {\n    let pubKeyBase64 = PemToBase64Key(pemPubKey)\n\n    return crypto.subtle.importKey(\n        \"spki\",\n        stringToArrayBuffer(atob(pubKeyBase64)),\n        ASYM_ALGO,\n        false,\n        [\"encrypt\"]\n    ).then(function (cryptoKey) {\n        return crypto.subtle.encrypt(\n            {\n                name: ASYM_ALGO.name,\n                hash: ASYM_ALGO.hash\n            },\n            cryptoKey,\n            stringToArrayBuffer(content)\n        ).then(function (encryptedBuffer) {\n            return btoa(arrayBufferToString(encryptedBuffer))\n        }).catch(function (error) {\n            logError(\"Failed to encrypt with RSA pubKey\", error)\n            return null\n        })\n    }).catch(function (error) {\n        logError(\"Failed to import RSA pubKey\", error)\n        return null\n    })\n}\n\nfunction DidwwEncrypt(options) {\n    if (!options) options = {}\n    let environment = options.environment || 'sandbox'\n    let publicKeysUrl = options.url || URLS[environment]\n    let publicKeys = null\n    let testPublicKeys = null\n    let fingerprint = null\n    if (environment === 'test') {\n        testPublicKeys = options.publicKeys\n        if (!testPublicKeys || !testPublicKeys[0] ||  !testPublicKeys[1]) {\n            throw 'pass publicKeys as an array of 2 public keys'\n        }\n    } else if (!publicKeysUrl) {\n        throw 'pass valid environment or url'\n    }\n\n    this.getPublicKeys = () => {\n        if (testPublicKeys) return new Promise(resolve => resolve(testPublicKeys))\n        if (publicKeys) return new Promise(resolve => resolve(publicKeys))\n\n        return fetchPublicKeys(publicKeysUrl)\n            .then(result => {\n                publicKeys = result\n                return publicKeys\n            })\n    }\n    this.getFingerprint = () => {\n        if (fingerprint) return new Promise(resolve => resolve(fingerprint))\n\n        return this.getPublicKeys()\n            .then(keys => calculateFingerprint(keys))\n            .then(result => {\n                fingerprint = result\n                return fingerprint\n            })\n    }\n    this.clearCache = () => {\n        publicKeys = null\n        fingerprint = null\n    }\n    this.encryptContent = fileContent => {\n        let asymKeys = null\n        let symKey = null\n        let symEncryptedContent = null\n        let symEncryptedKey = null // { content, key }\n        let encryptedParts = []\n\n        return this.getPublicKeys().then(result => asymKeys = result)\n            .then(\n                _ => generateKey().then(result => symKey = result)\n            )\n            .then(\n                _ => encryptAES(symKey, fileContent).then(result => {\n                    symEncryptedContent = result.content\n                    symEncryptedKey = result.key\n                })\n            )\n            .then(\n                _ => encryptRSA(asymKeys[0], symEncryptedKey).then(result => encryptedParts.push(result))\n            )\n            .then(\n                _ => encryptRSA(asymKeys[1], symEncryptedKey).then(result => encryptedParts.push(result))\n            )\n            .then(_ => {\n                return new DidwwEncryptedFile(\n                    encryptedParts.concat(symEncryptedContent).join(SEPARATOR)\n                )\n            })\n    }\n    this.encryptFile = file => {\n        return readFileContent(file).then(this.encryptContent)\n    }\n    this.encryptArrayBuffer = buffer => {\n        let binary = arrayBufferToString(buffer)\n        return this.encryptContent(binary)\n    }\n}\n\nDidwwEncrypt['DidwwEncryptedFile'] = DidwwEncryptedFile\nDidwwEncrypt['SYM_ALGO'] = SYM_ALGO\nDidwwEncrypt['ASYM_ALGO'] = ASYM_ALGO\n\n// export default DidwwEncrypt\nmodule.exports = DidwwEncrypt\n","window.DidwwEncrypt = require('./index');\n"]}