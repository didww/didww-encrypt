{"version":3,"sources":["constants.js","index.js","browser.js"],"names":["SEPARATOR","FINGERPRINT_ALGO","name","SYM_ALGO","length","ASYM_ALGO","modulusLength","publicExponent","Uint8Array","hash","URLS","production","sandbox","staging","test","local","module","exports","require","DidwwEncryptedFile","content","toString","toFile","buildFile","toArrayBuffer","stringToArrayBuffer","logError","message","console","error","fetchPublicKeys","url","fetch","then","response","json","keys","key_a","key_b","cryptoFingerprint","text","digestAlgo","textBuff","sha1Func","crypto","subtle","digest","bind","digestBuff","arrayBufferToHexString","calculateFingerprint","pemPublicKeys","publicKeysBase64","map","pemPubKey","PemToBase64Key","fingerprints","atob","result","push","_","join","str","buf","ArrayBuffer","bufView","i","charCodeAt","hexStringToArrayBuffer","hexString","intArray","match","byte","parseInt","buffer","arrayBufferToString","bytes","reduce","String","fromCharCode","byteString","type","window","navigator","msSaveBlob","file","Blob","lastModifiedDate","Date","File","lastModified","readFileContent","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsDataURL","generateKey","cryptoKey","exportKey","keyBuffer","encryptAES","key","ivBufView","getRandomValues","salt","repeat","importKey","encrypt","iv","encryptedBuffer","encryptedContent","btoa","split","slice","encryptRSA","pubKeyBase64","catch","DidwwEncrypt","options","environment","publicKeysUrl","publicKeys","fingerprint","getPublicKeys","getFingerprint","clearCache","encryptContent","fileContent","asymKeys","symKey","symEncryptedContent","symEncryptedKey","encryptedParts","concat","encryptFile","encryptArrayBuffer","binary"],"mappings":"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","file":"browser.js","sourceRoot":"../src","sourcesContent":["const SEPARATOR = \":::\"\nconst FINGERPRINT_ALGO = { name: \"sha-1\" }\nconst SYM_ALGO = { name: \"AES-CBC\", length: 256 }\nconst ASYM_ALGO = {\n    name: \"RSA-OAEP\",\n    modulusLength: 4096,\n    publicExponent: new Uint8Array([1, 0, 1]),\n    hash: { name: \"SHA-256\" }\n}\nconst URLS = {\n    production: 'https://my.didww.com/public_keys',\n    sandbox: 'https://my-sandbox.didww.com/public_keys',\n    staging: 'https://my-staging.didww.com/public_keys',\n    test: null,\n    local: ''\n}\n\nmodule.exports = {\n    SEPARATOR,\n    FINGERPRINT_ALGO,\n    SYM_ALGO,\n    ASYM_ALGO,\n    URLS\n}\n","const {\n    SEPARATOR,\n    FINGERPRINT_ALGO,\n    SYM_ALGO,\n    ASYM_ALGO,\n    URLS\n} = require('./constants')\n\nfunction DidwwEncryptedFile (content) {\n    this.toString = () => content\n    this.toFile = (name) => buildFile(content, name || 'file.enc', 'text/plain')\n    this.toArrayBuffer = () => stringToArrayBuffer(content)\n}\n\nfunction logError(message) {\n    if (console && console.error) console.error(message)\n}\n\nfunction fetchPublicKeys(url) {\n    return fetch(url)\n        .then(response => response.json())\n        .then(keys => [keys.key_a, keys.key_b])\n}\n\nfunction cryptoFingerprint (text, digestAlgo) {\n    var textBuff = stringToArrayBuffer(text);\n    var sha1Func = crypto.subtle.digest.bind(crypto.subtle, digestAlgo);\n    return sha1Func(textBuff)\n        .then(digestBuff => arrayBufferToHexString(digestBuff))\n}\n\nfunction calculateFingerprint(pemPublicKeys) {\n    let publicKeysBase64 = pemPublicKeys.map(pemPubKey => PemToBase64Key(pemPubKey))\n    let fingerprints = []\n    return cryptoFingerprint(atob(publicKeysBase64[0]), FINGERPRINT_ALGO)\n        .then(result => fingerprints.push(result))\n        .then(_ => cryptoFingerprint(atob(publicKeysBase64[1]), FINGERPRINT_ALGO))\n        .then(result => fingerprints.push(result))\n        .then(_ => fingerprints.join(SEPARATOR))\n}\n\nfunction stringToArrayBuffer(str) {\n    let buf = new ArrayBuffer(str.length)\n    let bufView = new Uint8Array(buf)\n    for (let i = 0; i < str.length; i++) {\n        bufView[i] = str.charCodeAt(i)\n    }\n    return buf\n}\n\nfunction hexStringToArrayBuffer (hexString) {\n    let intArray = hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16))\n    return new Uint8Array(intArray).buffer\n}\n\nfunction arrayBufferToString (buf) {\n    let bytes = new Uint8Array(buf)\n    return bytes.reduce((str, byte) => str + String.fromCharCode(byte), \"\")\n}\n\nfunction arrayBufferToHexString (buf) {\n    let bytes = new Uint8Array(buf)\n    return bytes.reduce((hexString, byte) => {\n        let byteString = byte.toString(16)\n        if (byteString.length === 1) {\n            byteString = '0' + byteString\n        }\n        return hexString + byteString\n    }, \"\");\n}\n\nconst buildFile = (content, name, type) => {\n    // Edge browser does not support File\n    if (window && window.navigator && window.navigator.msSaveBlob) {\n        let file = new Blob([content], {type: type});\n        file.lastModifiedDate = new Date();\n        file.name = name;\n        return file;\n    }\n\n    return new File([content], name, {type: type, lastModified: new Date()})\n}\n\nfunction readFileContent (file) {\n    return new Promise((resolve, reject) => {\n        let reader = new FileReader()\n        reader.onload = () => resolve(reader.result)\n        reader.onerror = () => reject(reader.error)\n        reader.readAsDataURL(file)\n    })\n}\n\nfunction generateKey () {\n    return crypto.subtle.generateKey(\n        SYM_ALGO,\n        true,\n        [\"encrypt\", \"decrypt\"]\n    ).then(cryptoKey => {\n        return crypto.subtle.exportKey(\"raw\", cryptoKey)\n            .then(keyBuffer => arrayBufferToHexString(keyBuffer))\n    })\n}\n\nfunction encryptAES (key, content) {\n    let keyBuffer = hexStringToArrayBuffer(key)\n    let ivBufView = crypto.getRandomValues(new Uint8Array(16))\n    let salt = '0'.repeat(16)\n\n    return crypto.subtle.importKey(\n        \"raw\",\n        keyBuffer,\n        { name: SYM_ALGO.name },\n        false,\n        [\"encrypt\", \"decrypt\"]\n    ).then(cryptoKey => {\n        return crypto.subtle.encrypt(\n            { name: SYM_ALGO.name, iv: ivBufView },\n            cryptoKey,\n            stringToArrayBuffer(content)\n        ).then(encryptedBuffer => {\n            // add first 16 bytes salt for backward compatibility old encrypted data.\n            let encryptedContent = btoa(salt + arrayBufferToString(encryptedBuffer))\n            let aesKey = [key, arrayBufferToHexString(ivBufView.buffer)].join(SEPARATOR)\n            return { key: aesKey, content: encryptedContent }\n        })\n    })\n}\n\nfunction PemToBase64Key (pemPubKey) {\n    // pemPubKey should look like this\n    // \"-----BEGIN PUBLIC KEY-----\\n<pubKeyBase64>\\n-----END PUBLIC KEY-----\\n\"\n    if (pemPubKey[pemPubKey.length - 1] !== \"\\n\") pemPubKey = pemPubKey + \"\\n\"\n    return pemPubKey.split(\"\\n\").slice(1, -2).join(\"\")\n}\n\nfunction encryptRSA(pemPubKey, content) {\n    let pubKeyBase64 = PemToBase64Key(pemPubKey)\n\n    return crypto.subtle.importKey(\n        \"spki\",\n        stringToArrayBuffer(atob(pubKeyBase64)),\n        ASYM_ALGO,\n        false,\n        [\"encrypt\"]\n    ).then(function (cryptoKey) {\n        return crypto.subtle.encrypt(\n            {\n                name: ASYM_ALGO.name,\n                hash: ASYM_ALGO.hash\n            },\n            cryptoKey,\n            stringToArrayBuffer(content)\n        ).then(function (encryptedBuffer) {\n            return btoa(arrayBufferToString(encryptedBuffer))\n        }).catch(function (error) {\n            logError(\"Failed to encrypt with RSA pubKey\", error)\n            return null\n        })\n    }).catch(function (error) {\n        logError(\"Failed to import RSA pubKey\", error)\n        return null\n    })\n}\n\nfunction DidwwEncrypt(options) {\n    // todo validate options (allow environment, publicKeys)\n    let environment = options.environment\n    let url = options.url || URLS[environment]\n    let publicKeysUrl = url + '/public_keys'\n    let publicKeys = null\n    let fingerprint = null\n    if (environment === 'test') {\n        publicKeys = options.publicKeys\n    }\n\n    this.getPublicKeys = () => {\n        if (publicKeys) return new Promise(resolve => resolve(publicKeys))\n\n        return fetchPublicKeys(publicKeysUrl)\n            .then(result => {\n                publicKeys = result\n                return publicKeys\n            })\n    }\n    this.getFingerprint = () => {\n        if (fingerprint) return new Promise(resolve => resolve(fingerprint))\n\n        return this.getPublicKeys()\n            .then(keys => calculateFingerprint(keys))\n            .then(result => {\n                fingerprint = result\n                return fingerprint\n            })\n    }\n    this.clearCache = () => {\n        publicKeys = null\n        fingerprint = null\n    }\n    this.encryptContent = fileContent => {\n        let asymKeys = null\n        let symKey = null\n        let symEncryptedContent = null\n        let symEncryptedKey = null // { content, key }\n        let encryptedParts = []\n\n        return this.getPublicKeys().then(result => asymKeys = result)\n            .then(\n                _ => generateKey().then(result => symKey = result)\n            )\n            .then(\n                _ => encryptAES(symKey, fileContent).then(result => {\n                    symEncryptedContent = result.content\n                    symEncryptedKey = result.key\n                })\n            )\n            .then(\n                _ => encryptRSA(asymKeys[0], symEncryptedKey).then(result => encryptedParts.push(result))\n            )\n            .then(\n                _ => encryptRSA(asymKeys[1], symEncryptedKey).then(result => encryptedParts.push(result))\n            )\n            .then(_ => {\n                return new DidwwEncryptedFile(\n                    encryptedParts.concat(symEncryptedContent).join(SEPARATOR)\n                )\n            })\n    }\n    this.encryptFile = file => {\n        return readFileContent(file).then(this.encryptContent)\n    }\n    this.encryptArrayBuffer = buffer => {\n        let binary = arrayBufferToString(buffer)\n        return this.encryptContent(binary)\n    }\n}\n\nDidwwEncrypt['DidwwEncryptedFile'] = DidwwEncryptedFile\nDidwwEncrypt['SYM_ALGO'] = SYM_ALGO\nDidwwEncrypt['ASYM_ALGO'] = ASYM_ALGO\n\n// export default DidwwEncrypt\nmodule.exports = DidwwEncrypt\n","window.DidwwEncrypt = require('./index')\n"]}